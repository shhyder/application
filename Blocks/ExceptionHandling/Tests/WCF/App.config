<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<configSections>
		<section name="exceptionHandling" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling" />
		<section name="loggingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings, Microsoft.Practices.EnterpriseLibrary.Logging"/>
	</configSections>

	<exceptionHandling>
		<exceptionPolicies>
			<add name="WCF Exception Shielding">
				<exceptionTypes>
					<add type="System.ArithmeticException, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
            postHandlingAction="ThrowNewException" name="ArithmeticException">
						<exceptionHandlers>
							<add
                type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.Tests.MockFaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.Tests"
                name="Mock Fault Contract Handler" />
						</exceptionHandlers>
					</add>
					<add type="System.ArgumentNullException, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
             postHandlingAction="ThrowNewException" name="ArgumentNullException">
						<exceptionHandlers>
							<add
                type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF"
                name="DefaultFaultContract Handler"
                faultContractType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.Tests.MockFaultContract, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.Tests">
								<mappings>
									<add name="Id" source="{Guid}"/>
								</mappings>
							</add>
						</exceptionHandlers>
					</add>
				</exceptionTypes>
			</add>
			<add name="CustomPolicy">
				<exceptionTypes>
					<add type="System.ArgumentException, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
            postHandlingAction="ThrowNewException" name="ArgumentException">
						<exceptionHandlers>
							<add
                type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.Tests.MockFaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.Tests"
                name="Mock Fault Contract Handler" />
						</exceptionHandlers>
					</add>
				</exceptionTypes>
			</add>
			<add name="UnhandledLoggedExceptions">
				<exceptionTypes>
					<add type="System.Exception, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
               postHandlingAction="ThrowNewException" name="Exception">
						<exceptionHandlers>
							<add name="Logging Handler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.Tests.MockUnhandledLoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.Tests"/>
							<!--Add this handler to send the Exception ID (Guid) to the client for future sync up with the logged ID-->
							<add name="WrapHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                   wrapExceptionType="System.Exception, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                   exceptionMessage="{handlingInstanceID}"/>
						</exceptionHandlers>
					</add>
				</exceptionTypes>
			</add>
			<add name="HandledLoggedExceptions">
				<exceptionTypes>
					<add type="System.ArithmeticException, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
            postHandlingAction="ThrowNewException" name="ArithmeticException">
						<exceptionHandlers>
							<add name="Logging Handler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.Tests.MockHandledLoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.Tests"/>
							<add name="DefaultFaultContract Handler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF"
                  faultContractType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.Tests.MockFaultContract, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.Tests"/>
						</exceptionHandlers>
					</add>
				</exceptionTypes>
			</add>
			<add name="FaultException">
				<exceptionTypes>
					<add name="FaultException"
               type="System.ServiceModel.FaultException, System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
               postHandlingAction="ThrowNewException"/>
				</exceptionTypes>
			</add>
			<add name="ExceptionTypeNotFound">
				<exceptionTypes>
				</exceptionTypes>
			</add>
		</exceptionPolicies>
	</exceptionHandling>

	<loggingConfiguration defaultCategory="Default Category" tracingEnabled="false">
		<logFilters>
			<add name="Category"
           type="Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter, Microsoft.Practices.EnterpriseLibrary.Logging"
           categoryFilterMode="AllowAllExceptDenied">
				<categoryFilters/>
			</add>
		</logFilters>
		<categorySources>
			<add name="Default Category" switchValue="All">
				<listeners>
					<add name="DefaultLogs"/>
				</listeners>
			</add>
			<add name="UnhandledLogs Category" switchValue="All">
				<listeners>
					<add name="UnhandledLogs"/>
				</listeners>
			</add>
			<add name="HandledLogs Category" switchValue="All">
				<listeners>
					<add name="HandledLogs"/>
				</listeners>
			</add>
		</categorySources>
		<specialSources>
			<errors name="errors" switchValue="All">
				<listeners>
					<add name="DefaultLogs"/>
					<add name="UnhandledLogs"/>
					<add name="HandledLogs"/>
				</listeners>
			</errors>
		</specialSources>
		<listeners>
			<add name="DefaultLogs"
           type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging"
           listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging"
           fileName="DefaultLogs.txt" formatter="Default Formatter"/>
			<add name="UnhandledLogs"
           type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging"
           listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging"
           fileName="UnhandledLogs.txt" formatter="Default Formatter"/>
			<add name="HandledLogs"
           type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedTextWriterTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging"
           listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging"
           fileName="HandledLogs.txt" formatter="Default Formatter"/>
			<!--<add name="Event Log Destination" 
           type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging" 
           listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging" 
           source="Service Factory Exception Handling" formatter="Default Formatter"/>-->
		</listeners>
		<formatters>
			<add name="Default Formatter"
           type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging"
           template="Timestamp: {timestamp}&#xA;Message: {message}&#xA;Category: {category}&#xA;Priority: {priority}&#xA;EventId: {eventid}&#xA;Severity: {severity}&#xA;Title:{title}&#xA;Machine: {machine}&#xA;Application Domain: {appDomain}&#xA;Process Id: {processId}&#xA;Process Name: {processName}&#xA;Win32 Thread Id: {win32ThreadId}&#xA;Thread Name: {threadName}&#xA;Extended Properties: {dictionary({key} - {value}&#xA;)}"/>
		</formatters>
	</loggingConfiguration>

</configuration>